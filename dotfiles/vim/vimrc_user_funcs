"" User-defined functions for vimrc
"" Yuliang Tao
"" Wed May 11 22:43:26 PDT 2016
"" 

"-----------------------------------------------------------------------------
" User function definitions
"-----------------------------------------------------------------------------
" function! DiffRemote {{{
function! DiffRemote()
    " Diff current buffer file with the file on server
    " Added at May 11, 2016
     
    "Toggle the flag (or set it if it doesn't yet exist)...
    " Make diff_remote_open as a global variable
    let t:diff_remote_open = exists('t:diff_remote_open') ? !t:diff_remote_open : 0

    if !t:diff_remote_open
        let curr_fname = expand('%:p')
        let remote_fname = substitute(curr_fname, '\(MAIN\/\)[^\/]*\/', '\1sanity/', '')
        if !filereadable(remote_fname)
            echo "** No such a file on remote!!"
        else
            " diff current file with the latest version on remote
            exec ":vertical diffs ".remote_fname
            exec ":diffupdate"
        endif
    else
        " delete buffer matching with keyword 'sanity'
        exec ":bd".bufnr("sanity")
    endif
endfunction
" }}}


" function! AddFileHeader {{{
function! AddFileHeader(company, prefix, ...)
    " Add a header for a file. Must set COMPANY_NAME, AUTHOR_NAME and
    " AUTHOR_EMAIL enviroment variables.
    " Line length is fixed to 78
    
    let separator_line = repeat(a:prefix, 78)
    let separator_prefix = repeat(a:prefix, 2)

    " a:0 is the number of optional args
    " a:1 is the first args of optional args
    if a:0 == 1
        let separator_line = a:prefix.a:prefix.repeat(a:1, 76)
    endif

    " start line number
    if a:0 > 1
        let curr_line_num = a:2
    else
        let curr_line_num = 0
    endif

    call append(curr_line_num, separator_line)

    " Company copyright
    if a:company == 1
        let copyright_text = "COPYRIGHT (C)".strftime(" %Y ").$COMPANY_NAME
        let copyright_space_num = (78 - strlen(copyright_text)) / 2 - strlen(separator_prefix)
        let copyright_prefix_spaces = repeat(" ", copyright_space_num)

        call append(curr_line_num + 1,  separator_prefix)
        call append(curr_line_num + 2,  separator_prefix.copyright_prefix_spaces.copyright_text)
        call append(curr_line_num + 3,  separator_prefix.repeat(" ", 28)."ALL RIGHTS RESERVED")
        call append(curr_line_num + 4,  separator_prefix)
        call append(curr_line_num + 5,  separator_line)
        let curr_line_num += 5
    endif
 
    " Other header information
    call append(curr_line_num + 1 , separator_prefix." File Name     :  ".expand("%:t"))
    call append(curr_line_num + 2 , separator_prefix." Author        :  ".
                \ $USER." (".$AUTHOR_EMAIL.")")
    call append(curr_line_num + 3 , separator_prefix." Created At    :  ".
                \ strftime("%c"))
    call append(curr_line_num + 4 , separator_prefix." Last Modified :  ".
                \ strftime("%c"))
    call append(curr_line_num + 5 , separator_prefix)
    call append(curr_line_num + 6 , separator_line)
    call append(curr_line_num + 7 , separator_prefix." Description   :  ")
    call append(curr_line_num + 8 , separator_prefix)
    call append(curr_line_num + 9 , separator_line)
    call append(curr_line_num + 10, separator_prefix." Change History:  R0.1 ".
                \ strftime("%Y-%m-%d")." | Initial creation.")    
    call append(curr_line_num + 11, separator_prefix)
    call append(curr_line_num + 12, separator_line)
    echohl WarningMsg | echo "File header added" | echohl none

    let curr_line_num += 12
    return curr_line_num

endfunction
" }}}


" function! AddScrHeader {{{
function! AddScrHeader(scr_type)
    " scr_type: bash, tcsh, tclsh, python, perl
    let curr_line_num = 0
    let interpreter = '#!/bin/'
    if a:scr_type == 'python3' || a:scr_type == 'perl'
        let interpreter = interpreter.'env '.a:scr_type
    else
        let interpreter = interpreter.a:scr_type
    endif

    " Add interpreter
    call append(0, interpreter)

    " Add header
    let line_num = AddFileHeader(0, '#', '*', 1)

    " Special lines
    if a:scr_type == 'bash'
        call append(line_num + 1, "set -euxo pipefail")
    elseif a:scr_type == 'perl'
        call append(line_num + 1, "use strict;")
    endif
endfunction
" }}}


" function! ChangeLastModified {{{
function! ChangeLastModified()
    " Change the last modified time in file header (in 0-20 lines) when buffer
    " is updated
    if &modified
        let save_cursor = getpos(".")
        let n = min([20, line("$")])
        keepjumps exe '1,' . n . 's#^\(.\{,5}Last Modified\c\s*:  \).*#\1'.
                    \ strftime('%c') . '#e'
        call histdel('search', -1)
        call setpos('.', save_cursor)
    endif
endfunction
" }}}


"-----------------------------------------------------------------------------
" Custom Command & autocmd
"-----------------------------------------------------------------------------

nmap <Leader>df :call DiffRemote()<CR>

" Add headers for different file types
autocmd BufNewFile *.v,*.sv,*.vpp,*.svh,*.vh exec ":call AddFileHeader(1, '/', '-')"
autocmd BufNewFile *.c,*.h,*.cpp,*.hpp exec ":call AddFileHeader(0, '/', '-')"
" autocmd BufNewFile *.sh,*.csh,*.py,*.pl,*.tcl exec ":call AddFileHeader(0, '#', '*')"
autocmd BufNewFile *.sh  exec ":call AddScrHeader('bash')"
autocmd BufNewFile *.csh exec ":call AddScrHeader('tcsh')"
autocmd BufNewFile *.tcl exec ":call AddScrHeader('tclsh')"
autocmd BufNewFile *.py  exec ":call AddScrHeader('python3')"
autocmd BufNewFile *.pl  exec ":call AddScrHeader('perl')"

" Update Last Modified automatically
autocmd BufWritePre *.v,*.sv,*.vpp,*.svh,*.vh,*.sh,*.csh,*.py,*.pl,*.tcl,*.c,*.h,*.cpp
            \ exec ":call ChangeLastModified()"

