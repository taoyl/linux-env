"" User-defined functions for vimrc
"" Yuliang Tao
"" Wed May 11 22:43:26 PDT 2016
"" 

"-----------------------------------------------------------------------------
" User function definitions
"-----------------------------------------------------------------------------
" function! AppendLines{{{
function! AppendLines(lines, s_lineno)
    " Append lines to s_lineno
    let i = a:s_lineno
    for line in a:lines
        call append(i, line)
        let i += 1
    endfor

    return i
endfunction
" }}}


" function! DiffRemote {{{
function! DiffRemote()
    " Diff current buffer file with the file on server
    " Added at May 11, 2016
     
    "Toggle the flag (or set it if it doesn't yet exist)...
    " Make diff_remote_open as a global variable
    let t:diff_remote_open = exists('t:diff_remote_open') ? !t:diff_remote_open : 0

    if !t:diff_remote_open
        let curr_fname = expand('%:p')
        let remote_fname = substitute(curr_fname, '\(MAIN\/\)[^\/]*\/', '\1sanity/', '')
        if !filereadable(remote_fname)
            echo "** No such a file on remote!!"
        else
            " diff current file with the latest version on remote
            exec ":vertical diffs ".remote_fname
            exec ":diffupdate"
        endif
    else
        " delete buffer matching with keyword 'sanity'
        exec ":bd".bufnr("sanity")
    endif
endfunction
" }}}


" function! AddFileHeader {{{
function! AddFileHeader(company, prefix, ...)
    " Add a header for a file. Must set COMPANY_NAME, AUTHOR_NAME and
    " AUTHOR_EMAIL enviroment variables.
    " Line length is fixed to 78
    
    let separator_line = repeat(a:prefix, 100)
    let separator_prefix = repeat(a:prefix, 2)

    " a:0 is the number of optional args
    " a:1 is the first args of optional args
    if a:0 == 1
        let separator_line = a:prefix.a:prefix.repeat(a:1, 76)
    endif

    " start line number
    if a:0 > 1
        let curr_lineno = a:2
    else
        let curr_lineno = 0
    endif

    call append(curr_lineno, separator_line)

    " Company copyright
    if a:company == 1
        let copyright_text = "COPYRIGHT (C)".strftime(" %Y ").$COMPANY_NAME
        let copyright_space_num = (78 - strlen(copyright_text)) / 2 - strlen(separator_prefix)
        let copyright_prefix_spaces = repeat(" ", copyright_space_num)

        call append(curr_lineno + 1,  separator_prefix)
        call append(curr_lineno + 2,  separator_prefix.copyright_prefix_spaces.copyright_text)
        call append(curr_lineno + 3,  separator_prefix.repeat(" ", 28)."ALL RIGHTS RESERVED")
        call append(curr_lineno + 4,  separator_prefix)
        call append(curr_lineno + 5,  separator_line)
        let curr_lineno += 5
    endif
 
    " Other header information
    call append(curr_lineno + 1 , separator_prefix." File Name     :  ".expand("%:t"))
    call append(curr_lineno + 2 , separator_prefix." Author        :  ".
                \ $USER." (".$AUTHOR_EMAIL.")")
    call append(curr_lineno + 3 , separator_prefix." Created At    :  ".
                \ strftime("%c"))
    call append(curr_lineno + 4 , separator_prefix." Last Modified :  ".
                \ strftime("%c"))
    call append(curr_lineno + 5 , separator_prefix)
    call append(curr_lineno + 6 , separator_line)
    call append(curr_lineno + 7 , separator_prefix." Description   :  ")
    call append(curr_lineno + 8 , separator_prefix)
    call append(curr_lineno + 9 , separator_line)
    call append(curr_lineno + 10, separator_prefix." Change History:  R0.1 ".
                \ strftime("%Y-%m-%d")." | Initial creation.")    
    call append(curr_lineno + 11, separator_prefix)
    call append(curr_lineno + 12, separator_line)
    let curr_lineno += 12
    echohl WarningMsg | echo "File header added" | echohl none

    let curr_ft = &filetype
    if curr_ft == 'verilog' || curr_ft == 'systemverilog' || curr_ft == 'verilog_systemverilog'
        call append(curr_lineno + 1, '')
        call append(curr_lineno + 2, 'module '.expand('%:t:r').'(')
        call append(curr_lineno + 3, ');')
        call append(curr_lineno + 4, '')
        call append(curr_lineno + 5, 'endmodule')
        let curr_lineno += 5
    endif

    return curr_lineno

endfunction
" }}}


" function! AddScrHeader {{{
function! AddScrHeader(scr_type)
    " scr_type: bash, tcsh, tclsh, python, perl
    let curr_lineno = 0
    let interpreter = '#!/bin/'
    if a:scr_type == 'python3' || a:scr_type == 'perl'
        let interpreter = interpreter.'env '.a:scr_type
    else
        let interpreter = interpreter.a:scr_type
    endif

    " Add interpreter
    call append(0, interpreter)

    " Add header
    let line_num = AddFileHeader(0, '#', '*', 1)

    " Special lines
    if a:scr_type == 'bash'
        call append(line_num + 1, "set -euxo pipefail")
    elseif a:scr_type == 'perl'
        call append(line_num + 1, "use strict;")
    endif
endfunction
" }}}


" function! ChangeLastModified {{{
function! ChangeLastModified()
    " Change the last modified time in file header (in 0-20 lines) when buffer
    " is updated
    if &modified
        let save_cursor = getpos(".")
        let n = min([20, line("$")])
        keepjumps exe '1,' . n . 's#^\(.\{,5}Last Modified\c\s*:  \).*#\1'.
                    \ strftime('%c') . '#e'
        call histdel('search', -1)
        call setpos('.', save_cursor)
    endif
endfunction
" }}}


" function! AddBashArgParse {{{
function! AddBashArgParse()
    " Add bash arg parse code automatically
    
    let curr_ft = &filetype

    if curr_ft != 'sh'
        echohl WarningMsg | echo "Not sh file" | echohl none
        return
    endif

    let curr_lineno = line('.')
    call append(curr_lineno+0 , '# Parse command-line args')
    call append(curr_lineno+1 , 'POSITIONAL=()')
    call append(curr_lineno+2 , 'while [[ $# -gt 0 ]]; do')
    call append(curr_lineno+3 , '    key="$1"')
    call append(curr_lineno+4 , '    case $key in')
    call append(curr_lineno+5 , '        -f|--file)')
    call append(curr_lineno+6 , '            FILE="$2"')
    call append(curr_lineno+7 , '            shift # past argument')
    call append(curr_lineno+8 , '            shift # past value')
    call append(curr_lineno+9 , '            ;;')
    call append(curr_lineno+10, '        *)    # unknown option')
    call append(curr_lineno+11, '            POSITIONAL+=("$1") # save it in an array for later')
    call append(curr_lineno+12, '            shift # past argument')
    call append(curr_lineno+13, '            ;;')
    call append(curr_lineno+14, '    esac')
    call append(curr_lineno+15, 'done')
    call append(curr_lineno+16, 'set -- "${POSITIONAL[@]}" # restore positional parameters')
    call append(curr_lineno+17, '')
    call append(curr_lineno+18, 'echo FILE  = "${FILE}"')
    call append(curr_lineno+19, 'echo Unknown args: "${POSITIONAL[*]}"')
endfunction
" }}}
    

" function! AddPythonArgParse {{{
function! AddPythonArgParse()
    " Add python arg parse code automatically
    
    let curr_ft = &filetype

    if curr_ft != 'python'
        echohl WarningMsg | echo "Not python file" | echohl none
        return
    endif

    let curr_lineno = line('.')
    call append(curr_lineno+0 , 'import argparse')
    call append(curr_lineno+1 , '')
    call append(curr_lineno+2 , '')
    call append(curr_lineno+3 , 'def parse_cli_args():')
    call append(curr_lineno+4 , '    """Parse command-line args"""')
    call append(curr_lineno+5 , '')
    call append(curr_lineno+6 , "    parser = argparse.ArgumentParser(description='Add your descriptions')")
    call append(curr_lineno+7 , "    parser.add_argument('-f', '--file', type=str, required=True,")
    call append(curr_lineno+8 , "            help='Add help info')")
    call append(curr_lineno+9 , "    parser.add_argument('-s', '--sort', action='store_true', default=False,")
    call append(curr_lineno+10, "            help='Add help info')")
    call append(curr_lineno+11, "    parser.add_argument('--bypass', nargs='*', type=str,")
    call append(curr_lineno+12, "            help='Add help info')")
    call append(curr_lineno+13, "    args = parser.parse_args()")
    call append(curr_lineno+14, "    print('file={}, sort={}, bypass={}'.format(args.file, args.sort, args.bypass))")
    call append(curr_lineno+15, '')
endfunction
" }}}

" function! VlogEmacsTemplate(stub, v2k=1){{{
function! VlogEmacsTemplate(stub, v2k=1)
    " Add verilog emacs template code
    " @param
    "     stub: Generate stub module from an existing module
    "      v2k: Use verilog-2001 style port declaration

    " Check file type
    let curr_ft = &filetype
    if curr_ft != 'verilog' || curr_ft != 'systemverilog' || curr_ft != 'verilog_systemverilog'
        echohl WarningMsg | echo "Not vlog file type" | echohl none
        return
    endif

    " record current line number
    let curr_lineno = line('.')

    " check if there is an existing module declaration
    call cursor(1, 1)
    let mod_lineno = search('^\s*module\s\+\w\+\s*(', 'W')
    if mod_lineno != 0
        echohl WarningMsg | echo 'Found a module at line '.mod_lineno | echohl none
        let mod_line = getline(mod_lineno)
        if a:v2k != 1
            let mod_line = substitute(mod_line, '(.*', '(/*AUTOARG*/', 'g')
            call setline(mod_lineno, mod_line)
            let curr_lineno = mod_lineno + 1
        else
            if a:stub == 1
                let mod_line = substitute(mod_line, '(.*', '(/*AUTOINOUTPARAM("'.expand('%:t:r').'")*/', 'g')
                call setline(mod_lineno, mod_line)
                let lines = ['(/*AUTOINOUTMODULE("'.expand('%:t:r').'")*/']
            else
                let mod_line = substitute(mod_line, '(.*', '(/*AUTOOUPUT*/', 'g')
                call setline(mod_lineno, mod_line)
                let lines = ['    /*AUTOINOUT*/', '    /*AUTOINPUT*/']
            endif
            " +1 because we assume it has a ');' line
            let curr_lineno = AppendLines(lines, mod_lineno) + 1
        endif
    else "New a module
        if a:v2k != 1
            call append(curr_lineno, 'module '.expand('%:t:r').'(/*AUTOARG*/')
            let curr_lineno += 1
        else
            if a:stub == 1
                let lines = ['module '.expand('%:t:r').'#(/*AUTOINOUTPARAM("'.expand('%:t:r').'")*/', ') (/*AUTOINOUTMODULE("'.expand('%:t:r').'")*/']
            else
                let lines = ['module '.expand('%:t:r').'(/*AUTOOUPUT*/', '    /*AUTOINOUT*/', '    /*AUTOINPUT*/']
            endif
            let curr_lineno = AppendLines(lines, curr_lineno)
        endif
        call append(curr_lineno, ');')
        let curr_lineno += 1
    endif

    " For stub module, add PARAM and INOOUT
    if a:stub == 1 && a:v2k != 1
        let lines = ['/*AUTOINOUTPARAM("'.expand('%:t:r').'")*/', '/*AUTOINOUTMODULE("'.expand('%:t:r').'")*/']
        let curr_lineno = AppendLines(lines, curr_lineno)
    endif

    " general autos
    let lines = ['', '/*AUTOWIRE*/', '/*AUTOREG*/', '/*AUTOTIEOFF*/', '', 'wire unused_ok = &{1'."'".'b0,']
    let lines += ['                   /*AUTOUNUSED*/', "                   1'b0};"]
    let curr_lineno = AppendLines(lines, curr_lineno)

    if a:stub == 0
        let lines = ['/* InstModule AUTO_TEMPLATE (']
        let lines += ['    .pin@_\(.*\) (wire\1of\2), //@ is short-hand for \([0-9]+\)']
        let lines += ['    .signal (signal[]), //[] expands bus range']
        let lines += ['    .\(.*\)_dbgbus_out ({@"vl-width"{1'."'".'b0}}), //tieoff']
        let lines += ['    .\(.*\)_test (@"(if (equal vl-dir \\"input\\") \\"{\\"vl-width\\"{1'."'".'b0}}\\" \\"\\")"), //tieoff output only']
        let lines += ['    .\(.*\) (@"(downcase vl-name)"[]), //lower-case']
        let lines += ['    .in(@"vl-cell-name"_in[]), //include instance name using vl-cell-name']
        let lines += ['    .out(@"(substring vl-cell-name 2)"_out[]), //include instance name but removing u_ prefix']
        let lines += [');', '']
        let lines += ['// InstModule #(/*AUTOINSTPARAM*/)', '// ) instname (/*AUTOINST*/)', '// );']
        let curr_lineno = AppendLines(lines, curr_lineno)
    endif

    " add endmodule if no module declaration found
    let last_lineno = line('$')
    if mod_lineno == 0
        let lines = ['', 'endmodule']
        let last_lineno = AppendLines(lines, last_lineno)
    endif

    let lines = ['', '// Local Variables:', '// verilog-library-flags:("-y incdir1/ -y incdir2/")']
    let lines += ['// verilog-library-directories:("." "dir1" "dir2" ...)', '// verilog-library-flags:("-f ./vcs.flist")']
    let lines += ['// verilog-auto-inst-param-value:t //enable this for parameter expand, else set it to nil']
    let last_lineno = AppendLines(lines, last_lineno)

endfunction
" }}}



"-----------------------------------------------------------------------------
" Custom Command & autocmd
"-----------------------------------------------------------------------------

nmap <Leader>df :call DiffRemote()<CR>

" Add headers for different file types
autocmd BufNewFile *.v,*.sv,*.vpp,*.svh,*.vh exec ":call AddFileHeader(1, '/', '-')"
autocmd BufNewFile *.c,*.h,*.cpp,*.hpp exec ":call AddFileHeader(0, '/', '-')"
" autocmd BufNewFile *.sh,*.csh,*.py,*.pl,*.tcl exec ":call AddFileHeader(0, '#', '*')"
autocmd BufNewFile *.sh  exec ":call AddScrHeader('bash')"
autocmd BufNewFile *.csh exec ":call AddScrHeader('tcsh')"
autocmd BufNewFile *.tcl exec ":call AddScrHeader('tclsh')"
autocmd BufNewFile *.py  exec ":call AddScrHeader('python3')"
autocmd BufNewFile *.pl  exec ":call AddScrHeader('perl')"

" Update Last Modified automatically
autocmd BufWritePre *.v,*.sv,*.vpp,*.svh,*.vh,*.sh,*.csh,*.py,*.pl,*.tcl,*.c,*.h,*.cpp
            \ exec ":call ChangeLastModified()"

